[
  {
    "body": "# WHAT IS A FUNCTION?\n\nFunctions let you group a series of statements together to perform a specific task. If different parts of a script repeat the same task, you can reuse the function (rather than repeating the same set of statements).\n\nWe will explore functions in ES5 since they are presenting a complex idea before `ES6 fat arrow function` come in place.\n\nLet us take simple example:\n\n**index.html**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Basic Function</title>\n    <link rel=\"stylesheet\" href=\"css/c03.css\" />\n  </head>\n  <body>\n    <h1>TravelWorthy</h1>\n    <div id=\"message\">Welcome to our site!</div>\n    <script src=\"js/basic-function.js\"></script>\n  </body>\n</html>\n```\n\n**style.css**\n\n```css\n/* JavaScript & jQuery - Chapter 3: Functions, Methods & Programming */\n/* The book used a font called Eau Sans - the download examples use Open Sans */\n\n@import url(http://fonts.googleapis.com/css?family=Open+Sans);\n\nbody {\n  background-color: #fff;\n  background: url(\"../images/travelworthy-backdrop.jpg\") no-repeat center center\n    fixed;\n  -webkit-background-size: cover;\n  -moz-background-size: cover;\n  -o-background-size: cover;\n  background-size: cover;\n  margin: 0px;\n  font-family: \"Open Sans\", sans-serif;\n}\n\nh1 {\n  background: #1e1b1e url(\"../images/travelworthy-logo.gif\") no-repeat;\n  width: 230px;\n  height: 180px;\n  float: left;\n  text-indent: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  margin: 0px;\n}\n\n/* message under the logo */\n\n#message {\n  float: left;\n  clear: left;\n  background-color: #ffb87a;\n  color: #1e1b1e;\n  width: 170px;\n  padding: 18px 30px;\n  text-align: center;\n}\n```\n\n**script.js** in **ES5**\n\n```js\n// Create a variable called msg to hold a new message\nvar msg = \"Sign up to receive our newsletter for 10% off!\";\n\n// Create a function to update the content of the element whose id attribute has a value of message\nfunction updateMessage() {\n  var el = document.getElementById(\"message\");\n  el.textContent = msg;\n}\n\n// Call the function\nupdateMessage();\n```\n\n**script.js** in **ES6**\n\n```js\n// Create a variable called msg to hold a new message\nlet msg = \"Sign up to receive our newsletter for 10% off!\";\n\n// Create a function to update the content of the element whose id attribute has a value of message\nlet updateMessage = () => {\n  let el = document.getElementById(\"message\");\n  el.textContent = msg;\n};\n\n// Call the function\nupdateMessage();\n```\n\n## Function declaration\n\nTo declare a function, you give it a name and then write the statements needed to achieve its task inside the curly braces. this known as `function declaration`.\n\n**Rule(ES5): function _manditory_name_ (_Optional_variables_) { //your code }**\n\n![Function declaration](function_decleration.png)\n\n## Calling a function\n\nAfter declaring a function, you can then execute all of statements between its curly braces with just one line of code.\nThis is known as `calling a function`.\n\n![Calling a function](calling_function.png)\n\n## Function flow\n\n![Function flow](function_flow.png)\n\n## Declaring a function that needs information\n\nSometimes a function needs specific information to perform its task. In such cases, when you declare the function you give it `parameters` inside the function, the parameters act like variables.\n\n![Function parameters](function_parameters.png)\n\n## Calling a function that need information\n\nWhen you call a function that has parameters, you specify the value it should use in the parentheses that follow its name. The value are called arguments, and they can be provided as values or variables.\n\n### 1. Arguments as values\n\n```js\ngetArea(3, 5);\n```\n\n### 2. Arguments as variables\n\n```js\nvar wallWidth = 3;\nvar wallHeight = 3;\ngetArea(wallWidth, wallHeight);\n```\n\n## Getting a single value out of a function\n\nSome functions returns information to the code that called them. For example, when they perform a calculation, they return the result.\n\n```js\nfunction calculateArea(width, height) {\n  var area = width * height;\n  return area;\n}\n\nvar wallOne = calculateArea(3, 4);\nvar wallTwo = calculateArea(8, 5);\n```\n\n## Getting a multiple values out of a function\n\nFunctions can return more than one value using an array.\nFor example, this function calculate the area and volume of a box.\n\n```js\nfunction getSize(width, height, depth) {\n  var area = width * height;\n  var volume = width * height * depth;\n  var result = [area, volume];\n  return result;\n}\nvar areaOne = getSize(3, 2, 3)[0];\nvar volumeOne = getSize(3, 2, 3)[0];\n```\n\n## Anonymous functions & function expressions\n\n`Expressions produce a value`. They can be used where values are expected. If a function is placed where a browser expects to see an expression, then it gets treated as an expression.\n\n### 1. Function declaration\n\nA fun ction declaration creates a function that you can call later in your code.\n\n```js\nfunction area(width, height) {\n  return width * height;\n}\nvar size = area(3, 4);\n```\n\n### 2. Function expression\n\nIf you put a function where the interpreter would expect to see an expression, then it is treated as an expression, and it is known as a **`function expression`**.\n\n```js\nvar area = function(width, height) {\n  return width * height;\n};\nvar size = area(3, 4);\n```\n",
    "contentPreview": "Definition of a function, how a function is working, how we write a function",
    "id": "01G1ER2422R36PAGYSTT63EBH5",
    "lang": "en",
    "metaTags": {
      "description": "what is a function, function explanation",
      "injectCssStyle": "",
      "injectHeader": ""
    },
    "postImage": "",
    "publishedAt": "",
    "readingTime": "3 min read"
  },
  {
    "body": "# IMMEDIATELY INVOKED FUNCTION EXPRESSIONS\n\nThis way of writing a function is used in several different situations. Often functions are used to ensure that the variable names do not conflict with each other (especially if the page uses more than one script).\n\n```js\nvar area = (function() {\n  var width = 3;\n  var height = 3;\n  return width * height;\n})();\n```\n\n![IIFE](IIFE.png)\n\n## When tou use IIFE?\n\n1. It is used to prevent conflicts between two scripts that might use the same variable names.\n2. To make auto execute for a function and calculate a value for another variable. Like execute specific configuration for your system.\n\n## Variable scope\n\nThe location where you declare a variable will affect where it can be used within your code. If you declare it within a function, it can only be used within that function. This is known as the variable's scope.\n\nWe have 2 scopes which are:\n\n### 1. Local scope:\n\nAny variable declaration **`inside`** a function will be considered as local variables.\n\n### 1. Global scope:\n\nAny variable declaration **`outside`** a function will be considered as local variables.\n\n![scopes](scopes.png)\n\n## How memory & variable works?\n\n`Global variables` use more memory. The browser has to remember them for as long as the web page using them. `Local variables` are only remembered during the period of time that a function is being executed. It is good to note that any local variable inside a function will be lost when the function ends.\n",
    "contentPreview": "",
    "id": "01G1ER5VTK9GBMC4BSFVQ98AHS",
    "lang": "en",
    "metaTags": {
      "injectCssStyle": "",
      "injectHeader": "",
      "metaDescription": "what is a iife, iife explanation"
    },
    "postImage": "",
    "publishedAt": "",
    "readingTime": "4 min read"
  },
  {
    "body": "# What is Objects\n\nObjects group together a set of variables and functions to create a model of a something you would recognize from the real world. In an object, variables and functions take on new names.\n\n- In objects, variable become as `properties`.\n- In objects, functions become as `methods`.\n\n![objects](objects.png)\n\nThis object represents a hotel. It has five properties and one method. The object is in curly braces. It is stored in a variable called `hotel`.\n\n```js\nlet hotel = {\n  // Properties\n  name: `Quay`,\n  rooms: 40,\n  booked: 25,\n  gym: true,\n  roomType: [\"twin\", \"double\", \"suite\"],\n\n  // Method\n  checkAvailability: () => {\n    return this.rooms - this.booked;\n  }\n};\n```\n\n![example](./object_example.png)\n\nFrom what we see of `hotel` object:\n\n| Key               | Value type |\n| ----------------- | ---------- |\n| name              | string     |\n| rooms             | number     |\n| booked            | number     |\n| gym               | boolean    |\n| roomTypes         | array      |\n| checkAvailability | Function   |\n\nObjects in JavaScript are aggregation of `primitive types` and other object also.\n\n## Create an object using (Literal notation)\n\nLiteral notation is the easiest and most popular way to create objects.\n\n- The object is the curly braces and their contents.\n- The object is stored in a variable called `ANY_VALID_VARIABLE_NAME`.\n- Separate each key from its value using a colon.\n- Separate each property and method by a `comma` BUT not after the last value.\n\n```js\nlet myName = {\n  firstName: \"Ahmed\",\n  lastName: \"HAMEED\",\n  ageAsString: \"I will not tell you\",\n  lovableProgrammingLanguage: \"JavaScript\",\n  isHeCrazyGeek: false\n};\n```\n\n## Accessing an object\n\nYou can access the properties or methods of an object by using `dot` notation. Also you can access properties by using square brackets.\n\n```js\n// ES5\nvar fullName = myName.firstName + \" \" + myName.lastName; // Ahmed HAMEED\n// ES6\nlet fullName = `${myName.firstName} ${myName.lastName}`; // Ahmed HAMEED\n```\n\nOR accessing by square brackets\n\n```js\n// ES5\nvar fullName = myName[\"firstName\"] + \" \" + myName[\"lastName\"]; // Ahmed HAMEED\n// ES6\nlet fullName = `${myName[\"firstName\"]} ${myName[\"lastName\"]}`; // Ahmed HAMEED\n```\n\nexample found in **Examples/c3/js/object-literal.js**\n\n**HTML**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>\n      JavaScript &amp; jQuery - Chapter 3: Functions, Methods &amp; Objects -\n      Object Literal\n    </title>\n    <link rel=\"stylesheet\" href=\"css/c03.css\" />\n  </head>\n  <body>\n    <h1>TravelWorthy</h1>\n    <div id=\"info\">\n      <h2>hotel availability</h2>\n      <div id=\"hotelName\"></div>\n      <div id=\"availability\">\n        <p id=\"rooms\"></p>\n        <p>rooms left</p>\n      </div>\n    </div>\n    <script src=\"js/object-literal.js\"></script>\n  </body>\n</html>\n```\n\n**JavaScript**\n\n```js\n// Set up the object\nvar hotel = {\n  name: \"Quay\",\n  rooms: 40,\n  booked: 25,\n  checkAvailability: function() {\n    return this.rooms - this.booked; // Need \"this\" because inside function\n  }\n};\n\n// Update the HTML\nvar elName = document.getElementById(\"hotelName\"); // Get element\nelName.textContent = hotel.name; // Update HTML with property of the object\n\nvar elRooms = document.getElementById(\"rooms\"); // Get element\nelRooms.textContent = hotel.checkAvailability(); // Update HTML with property of the object\n```\n\n**Another example**\nexample found in **Examples/c3/js/object-literal2.js**\n\n**HTML**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>\n      JavaScript &amp; jQuery - Chapter 3: Functions, Methods &amp; Objects -\n      Object Literal 2\n    </title>\n    <link rel=\"stylesheet\" href=\"css/c03.css\" />\n  </head>\n  <body>\n    <h1>TravelWorthy</h1>\n    <div id=\"info\">\n      <h2>hotel availability</h2>\n      <div id=\"hotelName\"></div>\n      <div id=\"availability\">\n        <p id=\"rooms\"></p>\n        <p>rooms left</p>\n      </div>\n    </div>\n    <script src=\"js/object-literal2.js\"></script>\n  </body>\n</html>\n```\n\n**JavaScript**\n\n```js\n// Set up the object\nvar hotel = {\n  name: \"Park\",\n  rooms: 120,\n  booked: 77,\n  checkAvailability: function() {\n    return this.rooms - this.booked; // Need \"this\" because inside function\n  }\n};\n\n// Update the HTML\nvar elName = document.getElementById(\"hotelName\"); // Get element\nelName.textContent = hotel.name; // Update HTML with property of the object\n\nvar elRooms = document.getElementById(\"rooms\"); // Get element\nelRooms.textContent = hotel.checkAvailability(); // Update HTML with property of the object\n```\n\n## Create an object using (Constructor notation)\n\nThe `new` keyword and `object` constructor create a blank object. Yo\nu can then add properties and methods to the object.\n\n![constructor notation](./constructor_notation.png)\n\nOR you can make it the short hand:\n\n```js\nlet hotel = {};\n```\n\n## Updating an object\n\nTo update the value of properties, use the `dot` notation or square brackets. They work on objects created using literal or constructor notation.\n\nTo delete a property use `delete` keyword to remove it from the object.\n\n![update](./update_object.png)\n![update2](./update_with_square_brackets.png)\n\nAlso for deletion.\n\n![delete](./delete.png)\n\n## Creating many objects\n\nBy using classes in ES6, you can create many objects. Sometimes you will need several objects to represent similar things. Since we've mentioned that every thing in JavaScript is object we can use classes to represent object like bellow:\n\n```js\nclass Hotel {\n  constructor(name, rooms, booked) {\n    this.name = name;\n    this.rooms = rooms;\n    this.booked = booked;\n  }\n  checkAvailability() {\n    return this.rooms - this.booked;\n  }\n}\n\nlet hotel1 = Hotel(\"Babilon\", 200, 50);\nlet hotel2 = Hotel(\"Ishtar\", 100, 80);\n```\n\n## Array are objects!!!!!!!!!\n\nArrays are actually a special type of object. They hold a related set of key/value pairs (like all objects), but the key for each value is its index number.\n\n```js\nlet array = [490, 270, 330, 420, 520];\n```\n\nAn array is:\n\n| Index number | Value |\n| ------------ | ----- |\n| 0            | 490   |\n| 1            | 270   |\n| 2            | 330   |\n| 3            | 420   |\n| 4            | 520   |\n\n## Objects reviews\n\n![review](./objects_creating_review.png)\n\n---\n\n### References and Terms:\n\n> :gem: It is very important to know small secret that is everything in JavaScript is an object or will convert to object so imagine the power of using objects.\n\n> :gem: Read more about [Data type structure in JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures)\n",
    "contentPreview": "",
    "id": "01G1ER89N3ASBJTPYP3J85FR7Y",
    "lang": "en",
    "metaTags": {
      "injectCssStyle": "",
      "injectHeader": "",
      "metaDescription": "what is a objects, objects explanation"
    },
    "postImage": "",
    "publishedAt": "",
    "readingTime": "5 min read"
  }
]
